package base.entities;
// Generated Dec 23, 2017 9:15:21 AM by Hibernate Tools 5.2.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Orders generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "Orders", catalog = "HighTechStore")
public class Orders implements java.io.Serializable {

	private int id;
	private Account accountByCustomer;
	private Account accountByCheckMan;
	private OrderStatus orderStatus;
	private Payment payment;
	private Date timeCreation;
	private String address;
	private double total;
	private String customerNote;
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Orders() {
	}

	public Orders(int id, Account accountByCustomer, Account accountByCheckMan, OrderStatus orderStatus,
			Payment payment, Date timeCreation, String address, double total) {
		this.id = id;
		this.accountByCustomer = accountByCustomer;
		this.accountByCheckMan = accountByCheckMan;
		this.orderStatus = orderStatus;
		this.payment = payment;
		this.timeCreation = timeCreation;
		this.address = address;
		this.total = total;
	}

	public Orders(int id, Account accountByCustomer, Account accountByCheckMan, OrderStatus orderStatus,
			Payment payment, Date timeCreation, String address, double total, String customerNote,
			Set<OrderDetail> orderDetails) {
		this.id = id;
		this.accountByCustomer = accountByCustomer;
		this.accountByCheckMan = accountByCheckMan;
		this.orderStatus = orderStatus;
		this.payment = payment;
		this.timeCreation = timeCreation;
		this.address = address;
		this.total = total;
		this.customerNote = customerNote;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Customer", nullable = false)
	public Account getAccountByCustomer() {
		return this.accountByCustomer;
	}

	public void setAccountByCustomer(Account accountByCustomer) {
		this.accountByCustomer = accountByCustomer;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CheckMan", nullable = false)
	public Account getAccountByCheckMan() {
		return this.accountByCheckMan;
	}

	public void setAccountByCheckMan(Account accountByCheckMan) {
		this.accountByCheckMan = accountByCheckMan;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Status", nullable = false)
	public OrderStatus getOrderStatus() {
		return this.orderStatus;
	}

	public void setOrderStatus(OrderStatus orderStatus) {
		this.orderStatus = orderStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Payment", nullable = false)
	public Payment getPayment() {
		return this.payment;
	}

	public void setPayment(Payment payment) {
		this.payment = payment;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "TimeCreation", nullable = false, length = 23)
	public Date getTimeCreation() {
		return this.timeCreation;
	}

	public void setTimeCreation(Date timeCreation) {
		this.timeCreation = timeCreation;
	}

	@Column(name = "Address", nullable = false, length = 250)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "Total", nullable = false, precision = 15, scale = 0)
	public double getTotal() {
		return this.total;
	}

	public void setTotal(double total) {
		this.total = total;
	}

	@Column(name = "CustomerNote")
	public String getCustomerNote() {
		return this.customerNote;
	}

	public void setCustomerNote(String customerNote) {
		this.customerNote = customerNote;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "orders")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}

}
